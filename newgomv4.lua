-- ‚úÖ Script: Multi-account auto farm (FIXED - check pet v·ªõi mutation)

local Players = game:GetService("Players")
local PathfindingService = game:GetService("PathfindingService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")

-- ‚öôÔ∏è L·∫•y PlotController
local PlotController = require(ReplicatedStorage.Controllers.PlotController)

-- üß† C·∫•u h√¨nh ngo√†i
local AccHold = getgenv().AccHold or {}
local HoldTime = getgenv().HoldTime or 3.5
local CheckInterval = getgenv().CheckInterval or 10

-- X√°c ƒë·ªãnh acc hi·ªán t·∫°i c√≥ ƒë∆∞·ª£c farm kh√¥ng v√† pet n√†o
local CurrentPet = nil
for _, cfg in ipairs(AccHold) do
	if cfg.AccountName == player.Name then
		CurrentPet = cfg.Pet
		break
	end
end

---------------------------------------------------------------------
-- üì¶ L·∫•y plot c·ªßa ch√≠nh b·∫°n
---------------------------------------------------------------------
local function GetMyPlot()
	local myPlot = PlotController.GetMyPlot()
	if myPlot and myPlot.PlotModel then
		return myPlot.PlotModel
	end
	return nil
end

---------------------------------------------------------------------
-- üè† L·∫•y v·ªã tr√≠ spawn (Decorations[12])
---------------------------------------------------------------------
local function GetHomeSpawn(myPlot)
	if not myPlot then return nil end
	local deco = myPlot:FindFirstChild("Decorations")
	if not deco then return nil end
	local spawnPart = deco:GetChildren()[12]
	if spawnPart and spawnPart.CFrame then
		return spawnPart.CFrame.Position
	end
	return nil
end

---------------------------------------------------------------------
-- üö∂‚Äç‚ôÇÔ∏è Di chuy·ªÉn th·∫≠t b·∫±ng Pathfinding
---------------------------------------------------------------------
local function WalkToPosition(targetPos)
	local path = PathfindingService:CreatePath({
		AgentRadius = 2,
		AgentHeight = 5,
		AgentCanJump = true,
		WaypointSpacing = 4
	})
	path:ComputeAsync(hrp.Position, targetPos)

	if path.Status ~= Enum.PathStatus.Success then
		warn("[Pathfind] ‚ùå Kh√¥ng th·ªÉ t√≠nh ƒë∆∞·ªùng ƒë·∫øn:", targetPos)
		return false
	end

	for _, wp in ipairs(path:GetWaypoints()) do
		if wp.Action == Enum.PathWaypointAction.Jump then
			humanoid.Jump = true
		end
		humanoid:MoveTo(wp.Position)
		local reached = humanoid.MoveToFinished:Wait()
		if not reached then return false end
	end
	return true
end

---------------------------------------------------------------------
-- üé• Camera ph√≠a sau nh√¢n v·∫≠t
---------------------------------------------------------------------
local function AdjustCameraBehindPlayer(pet)
	local cam = Workspace.CurrentCamera
	if not cam or not pet then return end

	local petPos = pet.WorldPivot and pet.WorldPivot.Position or pet.Position
	local direction = (petPos - hrp.Position).Unit
	local behindOffset = -direction * 5 + Vector3.new(0, 3, 0)
	local camPos = hrp.Position + behindOffset

	cam.CameraType = Enum.CameraType.Scriptable
	cam.CFrame = CFrame.new(camPos, hrp.Position + Vector3.new(0, 2, 0))

	task.delay(4, function()
		cam.CameraType = Enum.CameraType.Custom
	end)
end

---------------------------------------------------------------------
-- ‚å®Ô∏è Gi·ªØ ph√≠m E th·∫≠t
---------------------------------------------------------------------
local function HoldKeyEReal(duration)
	local start = tick()
	while tick() - start < duration do
		VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
		RunService.Heartbeat:Wait()
	end
	VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
end

---------------------------------------------------------------------
-- üîç Check xem pet name c√≥ kh·ªõp kh√¥ng (b·ªè qua mutation prefix)
---------------------------------------------------------------------
local function IsPetMatch(petName, targetPetName)
	-- So s√°nh tr·ª±c ti·∫øp
	if petName == targetPetName then
		return true
	end
	
	-- B·ªè qua c√°c mutation prefix ph·ªï bi·∫øn
	local mutations = {
		"Gold ", "Diamond ", "Rainbow ", "Bloodrot ", "Candy ",
		"Lava ", "Galaxy ", "Yin and Yang	 "
	}
	
	local baseName = petName
	for _, mut in ipairs(mutations) do
		baseName = baseName:gsub("^" .. mut, "")
	end
	
	-- Check n·∫øu base name kh·ªõp
	if baseName == targetPetName then
		return true
	end
	
	-- Check n·∫øu target name n·∫±m trong pet name
	if petName:find(targetPetName, 1, true) then
		return true
	end
	
	return false
end

---------------------------------------------------------------------
-- üß≠ X·ª≠ l√Ω 1 con pet
---------------------------------------------------------------------
local function HandlePet(pet, myPlot)
	local targetPos = pet.WorldPivot and pet.WorldPivot.Position
	if not targetPos then return end

	if WalkToPosition(targetPos + Vector3.new(0, 2, 0)) then
		AdjustCameraBehindPlayer(pet)
		HoldKeyEReal(HoldTime)

		local homePos = GetHomeSpawn(myPlot)
		if homePos then
			WalkToPosition(homePos + Vector3.new(0, 2, 0))
		end
	end
end

---------------------------------------------------------------------
-- üîç Qu√©t plots kh√°c
---------------------------------------------------------------------
local function ScanAllPlots()
	local myPlot = GetMyPlot()
	if not myPlot then return end

	local plotsFolder = workspace:FindFirstChild("Plots")
	if not plotsFolder then return end

	for _, plot in ipairs(plotsFolder:GetChildren()) do
		if plot:IsA("Model") and plot ~= myPlot then
			for _, pet in ipairs(plot:GetChildren()) do
				-- D√πng h√†m check m·ªõi thay v√¨ so s√°nh tr·ª±c ti·∫øp
				if IsPetMatch(pet.Name, CurrentPet) then
					print("[FARM] üéØ T√¨m th·∫•y:", pet.Name, "‚Üí Target:", CurrentPet)
					HandlePet(pet, myPlot)
				end
			end
		end
	end
end

---------------------------------------------------------------------
-- üß© Check n·∫øu h·∫øt pet (FIXED - check c·∫£ mutation)
---------------------------------------------------------------------
local function CheckMyPlotEmpty()
	local myPlot = GetMyPlot()
	if not myPlot then return true end

	-- ƒê·∫øm s·ªë pet trong config
	local targetPets = {}
	for _, cfg in ipairs(AccHold) do
		targetPets[cfg.Pet] = true
	end

	-- Check xem c√≥ pet n√†o kh·ªõp kh√¥ng
	for _, pet in ipairs(myPlot:GetChildren()) do
		for targetPet, _ in pairs(targetPets) do
			if IsPetMatch(pet.Name, targetPet) then
				print("[CHECK] ‚úÖ C√≤n pet:", pet.Name, "‚Üí Target:", targetPet)
				return false
			end
		end
	end
	
	print("[CHECK] ‚ùå Kh√¥ng t√¨m th·∫•y pet n√†o trong config")
	return true
end

---------------------------------------------------------------------
-- ‚ôªÔ∏è Ph√¢n vai acc
---------------------------------------------------------------------
if CurrentPet then
	print("[ACC FARM] üéØ", player.Name, "‚Üí gom pet:", CurrentPet)
	task.spawn(function()
		while true do
			pcall(function()
				ScanAllPlots()
			end)
			task.wait(CheckInterval)
		end
	end)
else
	print("[ACC CHECK] üëÄ", player.Name, "kh√¥ng trong danh s√°ch farm, ki·ªÉm tra plot ri√™ng.")
	task.spawn(function()
		while true do
			pcall(function()
				if CheckMyPlotEmpty() then
					print("[KICK] ‚ö†Ô∏è H·∫øt pet trong config, kick sau 5s...")
					task.wait(5)
					player:Kick("üî¥ H·∫øt pet c·∫ßn gi·ªØ r·ªìi.")
					return
				end
			end)
			task.wait(2)
		end
	end)
end
