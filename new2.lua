-- ‚úÖ Script: Multi-account auto farm (Fixed - kh√¥ng kick nh·∫ßm acc c√≥ pet)

local Players = game:GetService("Players")
local PathfindingService = game:GetService("PathfindingService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")

-- ‚öôÔ∏è L·∫•y PlotController
local PlotController = require(ReplicatedStorage.Controllers.PlotController)

-- üß† C·∫•u h√¨nh ngo√†i
local AccHold = getgenv().AccHold or {}
local HoldTime = getgenv().HoldTime or 3.5
local CheckInterval = getgenv().CheckInterval or 10

-- X√°c ƒë·ªãnh acc hi·ªán t·∫°i c√≥ ƒë∆∞·ª£c farm kh√¥ng v√† pet n√†o
local CurrentPet = nil
for _, cfg in ipairs(AccHold) do
	if cfg.AccountName == player.Name then
		CurrentPet = cfg.Pet
		break
	end
end

---------------------------------------------------------------------
-- üì¶ L·∫•y plot c·ªßa ch√≠nh b·∫°n
---------------------------------------------------------------------
local function GetMyPlot()
	local myPlot = PlotController.GetMyPlot()
	if myPlot and myPlot.PlotModel then
		return myPlot.PlotModel
	end
	return nil
end

---------------------------------------------------------------------
-- üè† L·∫•y v·ªã tr√≠ spawn (Decorations[12])
---------------------------------------------------------------------
local function GetHomeSpawn(myPlot)
	if not myPlot then return nil end
	local deco = myPlot:FindFirstChild("Decorations")
	if not deco then return nil end
	local spawnPart = deco:GetChildren()[12]
	if spawnPart and spawnPart.CFrame then
		return spawnPart.CFrame.Position
	end
	return nil
end

---------------------------------------------------------------------
-- üö∂‚Äç‚ôÇÔ∏è Di chuy·ªÉn th·∫≠t b·∫±ng Pathfinding
---------------------------------------------------------------------
local function WalkToPosition(targetPos)
	local path = PathfindingService:CreatePath({
		AgentRadius = 2,
		AgentHeight = 5,
		AgentCanJump = true,
		WaypointSpacing = 4
	})
	path:ComputeAsync(hrp.Position, targetPos)

	if path.Status ~= Enum.PathStatus.Success then
		warn("[Pathfind] ‚ùå Kh√¥ng th·ªÉ t√≠nh ƒë∆∞·ªùng ƒë·∫øn:", targetPos)
		return false
	end

	for _, wp in ipairs(path:GetWaypoints()) do
		if wp.Action == Enum.PathWaypointAction.Jump then
			humanoid.Jump = true
		end
		humanoid:MoveTo(wp.Position)
		local reached = humanoid.MoveToFinished:Wait()
		if not reached then return false end
	end
	return true
end

---------------------------------------------------------------------
-- üé• Camera ph√≠a sau nh√¢n v·∫≠t
---------------------------------------------------------------------
local function AdjustCameraBehindPlayer(pet)
	local cam = Workspace.CurrentCamera
	if not cam or not pet then return end

	local petPos = pet.WorldPivot and pet.WorldPivot.Position or pet.Position
	local direction = (petPos - hrp.Position).Unit
	local behindOffset = -direction * 5 + Vector3.new(0, 3, 0)
	local camPos = hrp.Position + behindOffset

	cam.CameraType = Enum.CameraType.Scriptable
	cam.CFrame = CFrame.new(camPos, hrp.Position + Vector3.new(0, 2, 0))

	task.delay(4, function()
		cam.CameraType = Enum.CameraType.Custom
	end)
end

---------------------------------------------------------------------
-- ‚å®Ô∏è Gi·ªØ ph√≠m E th·∫≠t
---------------------------------------------------------------------
local function HoldKeyEReal(duration)
	local start = tick()
	while tick() - start < duration do
		VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
		RunService.Heartbeat:Wait()
	end
	VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
end

---------------------------------------------------------------------
-- üß≠ X·ª≠ l√Ω 1 con pet (debug + auto ch·ªçn WorldPivot / RootPart)
---------------------------------------------------------------------
local function HandlePet(pet, myPlot)
	local targetPos

	-- ∆Øu ti√™n WorldPivot
	if pet.WorldPivot then
		targetPos = pet.WorldPivot.Position
		print(("[DEBUG] üß≠ Pet '%s' c√≥ WorldPivot: %s"):format(pet.Name, tostring(targetPos)))
	elseif pet.PrimaryPart then
		targetPos = pet.PrimaryPart.Position
		print(("[DEBUG] üß© Pet '%s' d√πng PrimaryPart: %s"):format(pet.Name, tostring(targetPos)))
	else
		local root = pet:FindFirstChild("RootPart") or pet:FindFirstChildWhichIsA("BasePart")
		if root then
			targetPos = root.Position
			print(("[DEBUG] ü¶¥ Pet '%s' d√πng RootPart/BasePart: %s"):format(pet.Name, tostring(targetPos)))
		end
	end

	if not targetPos then
		warn("[Pet] ‚ùå Kh√¥ng t√¨m th·∫•y v·ªã tr√≠ h·ª£p l·ªá cho:", pet.Name)
		return
	end

	print(("[DEBUG] üö∂‚Äç‚ôÇÔ∏è ƒêang di chuy·ªÉn t·ªõi pet '%s'..."):format(pet.Name))
	if WalkToPosition(targetPos + Vector3.new(0, 2, 0)) then
		print(("[DEBUG] üéØ ƒê√£ ƒë·∫øn v·ªã tr√≠ pet '%s', b·∫Øt ƒë·∫ßu gi·ªØ ph√≠m E..."):format(pet.Name))
		AdjustCameraBehindPlayer(pet)
		HoldKeyEReal(HoldTime)

		local homePos = GetHomeSpawn(myPlot)
		if homePos then
			print(("[DEBUG] üè† Quay v·ªÅ v·ªã tr√≠ nh√†: %s"):format(tostring(homePos)))
			WalkToPosition(homePos + Vector3.new(0, 2, 0))
		end
	else
		warn("[Pathfind] ‚ùå Kh√¥ng th·ªÉ di chuy·ªÉn ƒë·∫øn:", pet.Name)
	end
end

---------------------------------------------------------------------
-- üßÆ Chu·∫©n h√≥a t√™n (so s√°nh kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
---------------------------------------------------------------------
local function normalizeName(s)
	if not s then return "" end
	return tostring(s):gsub("^%s+", ""):gsub("%s+$", ""):lower()
end

---------------------------------------------------------------------
-- üîç Qu√©t plots kh√°c (ch·ªâ l·∫•y ƒë√∫ng pet trong danh s√°ch)
---------------------------------------------------------------------
local function ScanAllPlots()
	local myPlot = GetMyPlot()
	if not myPlot then
		warn("[DEBUG] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y plot c·ªßa b·∫°n!")
		return
	end

	local plotsFolder = workspace:FindFirstChild("Plots")
	if not plotsFolder then
		warn("[DEBUG] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c Plots!")
		return
	end

	print("[DEBUG] üîé B·∫Øt ƒë·∫ßu qu√©t t·∫•t c·∫£ plots...")
	print(("[DEBUG] üéØ Pet c·∫ßn t√¨m: %s"):format(tostring(CurrentPet)))

	local normalizedTarget = normalizeName(CurrentPet)

	for _, plot in ipairs(plotsFolder:GetChildren()) do
		if plot:IsA("Model") and plot ~= myPlot then
			print(("[DEBUG] üß± ƒêang ki·ªÉm tra plot: %s"):format(plot.Name))
			for _, pet in ipairs(plot:GetChildren()) do
				if not pet:IsA("Model") then continue end

				local petName = pet.Name or ""
				local mutation = pet:GetAttribute("Mutation")
				local yin = pet:GetAttribute("YinYangPalette")
				local hasPivot = pet.WorldPivot ~= nil

				-- debug log t·∫•t c·∫£
				print(("[DEBUG] üì¶ Pet: %s | Mutation=%s | YinYang=%s | HasPivot=%s"):format(
					petName, tostring(mutation), tostring(yin), tostring(hasPivot)
				))

				if normalizeName(petName) == normalizedTarget then
					print(("[Pet Found] üéØ H·ª£p l·ªá: %s ‚Üí B·∫Øt ƒë·∫ßu x·ª≠ l√Ω..."):format(petName))
					HandlePet(pet, myPlot)
				end
			end
		end
	end

	print("[DEBUG] ‚úÖ Qu√©t xong plots.")
end

---------------------------------------------------------------------
-- üß© Check n·∫øu h·∫øt pet TRONG DANH S√ÅCH CONFIG
---------------------------------------------------------------------
local noPetCount = 0  -- ƒë·∫øm s·ªë l·∫ßn li√™n ti·∫øp kh√¥ng th·∫•y pet

local function CheckMyPlotEmpty()
	local myPlot = GetMyPlot()
	if not myPlot then
		warn("[DEBUG] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y plot c·ªßa ch√≠nh b·∫°n.")
		return false
	end

	-- ‚úÖ L·∫•y danh s√°ch pet c·ªßa acc n√†y t·ª´ config
	local myPets = {}
	for _, cfg in ipairs(AccHold) do
		if cfg.AccountName == player.Name then
			table.insert(myPets, normalizeName(cfg.Pet))
		end
	end

	if #myPets == 0 then
		warn("[DEBUG] ‚ö†Ô∏è Acc n√†y kh√¥ng c√≥ pet n√†o trong config.")
		return false
	end

	-- ‚úÖ ƒê·∫øm pet trong danh s√°ch c√≤n trong plot
	local foundPets = 0
	for _, obj in ipairs(myPlot:GetChildren()) do
		if obj:IsA("Model") then
			local isDecoration = obj.Name == "Decorations" or obj:FindFirstChild("Decorations")
			if not isDecoration then
				local petName = normalizeName(obj.Name)
				for _, configPet in ipairs(myPets) do
					if petName == configPet then
						foundPets += 1
						print(("[DEBUG] üêæ Pet trong config c√≤n l·∫°i: %s"):format(obj.Name))
						break
					end
				end
			end
		end
	end

	if foundPets > 0 then
		noPetCount = 0
		print(("[DEBUG] ‚úÖ C√≤n %d pet trong danh s√°ch config."):format(foundPets))
		return false
	else
		noPetCount += 1
		print(("[DEBUG] ‚ö†Ô∏è L·∫ßn %d kh√¥ng th·∫•y pet n√†o trong config."):format(noPetCount))
	end

	-- Ch·ªâ kick n·∫øu 3 l·∫ßn li√™n ti·∫øp kh√¥ng th·∫•y pet trong config
	if noPetCount >= 3 then
		print("[DEBUG] ‚ùå X√°c nh·∫≠n h·∫øt pet trong danh s√°ch config sau 3 l·∫ßn ki·ªÉm tra.")
		return true
	end

	return false
end

---------------------------------------------------------------------
-- ‚ôªÔ∏è Ph√¢n vai acc
---------------------------------------------------------------------
if CurrentPet then
	print("[ACC FARM] üéØ", player.Name, "‚Üí gom pet:", CurrentPet)
	task.spawn(function()
		while true do
			pcall(function()
				ScanAllPlots()
			end)
			task.wait(CheckInterval)
		end
	end)
else
	print("[ACC CHECK] üëÄ", player.Name, "kh√¥ng trong danh s√°ch farm, ki·ªÉm tra plot ri√™ng.")
	task.spawn(function()
		while true do
			pcall(function()
				if CheckMyPlotEmpty() then
					player:Kick("H·∫øt pet r·ªìi.")
					return
				end
			end)
			task.wait(5)
		end
	end)
end
