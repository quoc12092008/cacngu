local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer

-- HTTP Request function (syn/exploit required)
local http = syn and syn.request or http_request or request

-- ==============================================
-- KEY CONFIGURATION - USER MUST SET THIS
-- ==============================================
getgenv().PET_TRACKER_KEY = getgenv().PET_TRACKER_KEY or "key123"  -- CHANGE THIS TO YOUR KEY

-- API Configuration
local API_CONFIG = {
	baseUrl = "https://gundamrealm.io.vn/trackgameantrom"
    enabled = true,
    timeout = 15,
    retryAttempts = 3,
    retryDelay = 2
}

-- Timing Configuration
local TIMING_CONFIG = {
    petCheckInterval = 30,    -- Check pets m·ªói 30 gi√¢y
    apiSendInterval = 120,    -- G·ª≠i API m·ªói 120 gi√¢y (2 ph√∫t)
    forceUpdateInterval = 600,  -- Force update m·ªói 10 ph√∫t
    authCheckInterval = 300   -- Check auth m·ªói 5 ph√∫t
}

-- Danh s√°ch pet ƒë∆∞·ª£c ph√©p hi·ªÉn th·ªã
local allowedPets = {
    "La Vacca Saturno Saturnita",
    "Torrtuginni Dragonfrutini", 
    "Agarrini La Palini",
    "Las Tralaleritas",
    "Los Tralaleritos",
    "Las Vaquitas Saturnitas",
    "Graipusseni Medussini",
    "Chicleteira Bicicleteira",
    "Pot Hotspot",
    "La Grande Combinasion",
    "Los Combinasionas",
    "Nuclearo Dinossauro",
    "Los Hotspotsitos",
    "Garama and Mandundung",
    "Esok Sekola",
    "Dragon Cannelloni",
    "Secret Lucky Block",
    "Chimpanzini Spiderini",
    "Karkerkar Kurkur"
}

-- Chuy·ªÉn ƒë·ªïi th√†nh set ƒë·ªÉ t√¨m ki·∫øm nhanh h∆°n
local allowedPetSet = {}
for _, petName in ipairs(allowedPets) do
    allowedPetSet[petName:lower()] = true
end

-- Authentication variables
local sessionToken = nil
local lastAuthCheck = 0
local isAuthenticated = false
local userInfo = nil

-- Bi·∫øn ƒë·ªÉ l∆∞u connection v√† timing
local recheckConnection = nil
local lastFoundPets = {}
local lastPetCheckTime = 0
local lastApiSendTime = 0
local lastForceUpdateTime = 0
local consecutiveFailures = 0

-- Statistics tracking
local stats = {
    totalChecks = 0,
    totalChanges = 0,
    totalApiCalls = 0,
    successfulCalls = 0,
    failedCalls = 0,
    authAttempts = 0,
    startTime = tick()
}

-- H√†m authenticate v·ªõi server
local function authenticateWithServer()
    if not http then
        warn("‚ùå HTTP request function kh√¥ng c√≥ s·∫µn. C·∫ßn exploit c√≥ syn.request ho·∫∑c http_request")
        return false, "HTTP function not available"
    end
    
    if not getgenv().PET_TRACKER_KEY or getgenv().PET_TRACKER_KEY == "" then
        warn("‚ùå PET_TRACKER_KEY ch∆∞a ƒë∆∞·ª£c set! S·ª≠ d·ª•ng: getgenv().PET_TRACKER_KEY = 'your_key_here'")
        return false, "Key not set"
    end
    
    local success, result = pcall(function()
        local url = API_CONFIG.baseUrl .. "/api/auth/login"
        
        local requestData = {
            key = getgenv().PET_TRACKER_KEY
        }
        
        local jsonData = HttpService:JSONEncode(requestData)
        
        print("üîê Authenticating with key: " .. string.rep("*", #getgenv().PET_TRACKER_KEY))
        
        local response = http({
            Url = url,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json",
                ["Accept"] = "application/json"
            },
            Body = jsonData
        })
        
        if response.Success then
            local responseData = HttpService:JSONDecode(response.Body)
            
            if responseData.success then
                sessionToken = responseData.sessionToken
                userInfo = responseData.user
                isAuthenticated = true
                
                print("‚úÖ Authentication successful!")
                print("üë§ Username: " .. userInfo.username)
                print("üéØ Slots: " .. userInfo.slots)
                print("üìÖ Expires: " .. userInfo.expiry)
                
                return true, responseData
            else
                error("Authentication failed: " .. (responseData.error or "Unknown error"))
            end
        else
            error("HTTP Error: " .. (response.StatusCode or "Unknown") .. " - " .. (response.Body or "No response"))
        end
    end)
    
    stats.authAttempts = stats.authAttempts + 1
    
    if success then
        return true, result
    else
        warn("‚ùå Authentication Error: " .. tostring(result))
        
        -- Check for specific error codes
        if tostring(result):find("INVALID_KEY") then
            warn("‚ùå KEY KH√îNG H·ª¢P L·ªÜ: Key '" .. getgenv().PET_TRACKER_KEY .. "' kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n")
            warn("üí° Ki·ªÉm tra l·∫°i key ho·∫∑c li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c c·∫•p key m·ªõi")
        end
        
        return false, result
    end
end

-- H√†m ki·ªÉm tra authentication status
local function checkAuthenticationStatus()
    if not sessionToken then
        return false, "No session token"
    end
    
    local success, result = pcall(function()
        local url = API_CONFIG.baseUrl .. "/api/auth/me"
        
        local response = http({
            Url = url,
            Method = "GET",
            Headers = {
                ["Accept"] = "application/json",
                ["Authorization"] = "Bearer " .. sessionToken
            }
        })
        
        if response.Success then
            local responseData = HttpService:JSONDecode(response.Body)
            
            if responseData.success then
                userInfo = responseData.user
                return true, responseData
            else
                error("Auth check failed: " .. (responseData.error or "Unknown error"))
            end
        else
            error("HTTP Error: " .. (response.StatusCode or "Unknown"))
        end
    end)
    
    if success then
        return true, result
    else
        warn("‚ö†Ô∏è Auth check failed: " .. tostring(result))
        
        -- Reset authentication if session is invalid
        if tostring(result):find("401") or tostring(result):find("INVALID_SESSION") then
            sessionToken = nil
            isAuthenticated = false
            userInfo = nil
        end
        
        return false, result
    end
end

-- H√†m g·ª≠i data t·ªõi API v·ªõi authentication
local function sendDataToAPI(accountName, pets, isForced)
    if not API_CONFIG.enabled then
        return false, "API disabled"
    end
    
    if not isAuthenticated or not sessionToken then
        warn("‚ùå Ch∆∞a authenticate. Th·ª≠ authenticate l·∫°i...")
        local authSuccess = authenticateWithServer()
        if not authSuccess then
            return false, "Authentication failed"
        end
    end
    
    local attempt = 0
    local lastError = nil
    
    while attempt < API_CONFIG.retryAttempts do
        attempt = attempt + 1
        stats.totalApiCalls = stats.totalApiCalls + 1
        
        local success, result = pcall(function()
            local url = API_CONFIG.baseUrl .. "/api/accounts/" .. HttpService:UrlEncode(accountName)
            
            local requestData = {
                pets = pets,
                timestamp = os.time(),
                game_info = {
                    place_id = game.PlaceId,
                    player_id = LocalPlayer.UserId,
                    display_name = LocalPlayer.DisplayName,
                    server_id = game.JobId
                },
                metadata = {
                    total_pets = #pets,
                    check_type = isForced and "forced" or "scheduled",
                    client_time = os.date("%Y-%m-%d %H:%M:%S"),
                    attempt = attempt,
                    key_user = userInfo and userInfo.username or "unknown"
                }
            }
            
            local jsonData = HttpService:JSONEncode(requestData)
            
            if attempt == 1 then
                print("üì° ƒêang g·ª≠i data t·ªõi: " .. url)
                print("üë§ User: " .. (userInfo and userInfo.username or "unknown"))
                print("üìã Pets: " .. #pets .. " | Type: " .. (isForced and "FORCED" or "SCHEDULED"))
            end
            
            local response = http({
                Url = url,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json",
                    ["Accept"] = "application/json",
                    ["Authorization"] = "Bearer " .. sessionToken
                },
                Body = jsonData
            })
            
            if response.Success then
                local responseData = HttpService:JSONDecode(response.Body)
                
                if responseData.success then
                    if attempt > 1 then
                        print("‚úÖ API Success (attempt " .. attempt .. "): " .. response.Body)
                    else
                        print("‚úÖ API Response: " .. responseData.message)
                    end
                    
                    return responseData
                else
                    error("API Error: " .. (responseData.error or "Unknown error"))
                end
            elseif response.StatusCode == 401 then
                -- Session expired, try to re-authenticate
                warn("üîê Session expired, re-authenticating...")
                isAuthenticated = false
                sessionToken = nil
                
                local authSuccess = authenticateWithServer()
                if authSuccess then
                    error("RETRY_WITH_NEW_AUTH") -- Special error to retry with new auth
                else
                    error("Re-authentication failed")
                end
            elseif response.StatusCode == 403 and response.Body and response.Body:find("SLOT_LIMIT_EXCEEDED") then
                error("‚ùå SLOT LIMIT EXCEEDED: Account v∆∞·ª£t qu√° s·ªë slot cho ph√©p (" .. (userInfo and userInfo.slots or "unknown") .. " slots)")
            else
                error("HTTP Error: " .. (response.StatusCode or "Unknown") .. " - " .. (response.Body or "No response"))
            end
        end)
        
        if success then
            consecutiveFailures = 0
            stats.successfulCalls = stats.successfulCalls + 1
            print("‚úÖ API: ƒê√£ g·ª≠i data cho " .. accountName .. " - " .. #pets .. " pets (attempt " .. attempt .. ")")
            return true, result
        else
            lastError = result
            consecutiveFailures = consecutiveFailures + 1
            stats.failedCalls = stats.failedCalls + 1
            
            -- Handle special retry case
            if tostring(result):find("RETRY_WITH_NEW_AUTH") then
                warn("üîÑ Retrying with new authentication...")
                task.wait(1)
                continue
            end
            
            if attempt < API_CONFIG.retryAttempts then
                warn("‚ùå API Error (attempt " .. attempt .. "): " .. tostring(result))
                warn("üîÑ Retrying in " .. API_CONFIG.retryDelay .. " seconds...")
                task.wait(API_CONFIG.retryDelay)
            end
        end
    end
    
    warn("‚ùå API Failed after " .. API_CONFIG.retryAttempts .. " attempts: " .. tostring(lastError))
    
    -- Disable API if too many consecutive failures (but keep auth)
    if consecutiveFailures >= 10 then
        warn("‚ö†Ô∏è Too many API failures, temporarily disabling API calls")
        task.wait(60) -- Wait 1 minute before re-enabling
        consecutiveFailures = 0
    end
    
    return false, lastError
end

-- H√†m t√¨m plot c·ªßa b·∫°n
local function findMyPlot(waitForSpawn)
    local deadline = tick() + (waitForSpawn and 10 or 0)
    repeat
        for _, plot in ipairs(Workspace.Plots:GetChildren()) do
            local ownerTag = plot:FindFirstChild("Owner")
            if ownerTag and ownerTag.Value == LocalPlayer then
                return plot
            end
            local sign = plot:FindFirstChild("PlotSign")
            local label = sign and sign:FindFirstChild("SurfaceGui") and sign.SurfaceGui.Frame:FindFirstChild("TextLabel")
            if label then
                local txt = label.Text:lower()
                if txt:match(LocalPlayer.Name:lower()) or txt:match(LocalPlayer.DisplayName:lower()) then
                    return plot
                end
            end
        end
        RunService.RenderStepped:Wait()
    until tick() > deadline
    return nil
end

-- H√†m l·∫•y d·ªØ li·ªáu pet t·ª´ spawn (t·ªëi ∆∞u)
local function getPetDataFromSpawn(spawn)
    if not spawn then return nil end

    local attach = spawn:FindFirstChild("Attachment")
    if not attach then return nil end
    
    local overhead = attach:FindFirstChild("AnimalOverhead")
    if not overhead then return nil end
    
    local lbl = overhead:FindFirstChild("DisplayName")
    if not lbl then return nil end
    
    local name = lbl.Text
    if not name or name == "" then return nil end

    local mut = "Normal"

    -- Check mutation t·ª´ Attributes c·ªßa pet trong workspace
    local petObj = Workspace:FindFirstChild(name)
    if petObj then
        local attrMut = petObj:GetAttribute("Mutation")
        if attrMut and attrMut ~= "" then
            mut = attrMut
        end
    end

    return {name = name, mut = mut}
end

-- H√†m l·∫•y list pet ƒë∆∞·ª£c ph√©p trong plot (t·ªëi ∆∞u)
local function getAllowedPetsInPlot(plot)
    local pets = {}
    local podFolder = plot and plot:FindFirstChild("AnimalPodiums")
    if not podFolder then return pets end
    
    for _, podium in ipairs(podFolder:GetChildren()) do
        if podium:IsA("Model") then
            local base = podium:FindFirstChild("Base")
            if base then
                local spawn = base:FindFirstChild("Spawn")
                local data = getPetDataFromSpawn(spawn)
                if data then
                    -- Ch·ªâ th√™m pet n·∫øu n·∫±m trong danh s√°ch cho ph√©p
                    if allowedPetSet[data.name:lower()] then
                        table.insert(pets, data)
                    end
                end
            end
        end
    end
    return pets
end

-- H√†m so s√°nh 2 danh s√°ch pet (t·ªëi ∆∞u)
local function comparePetLists(oldPets, newPets)
    local oldPetMap = {}
    local newPetMap = {}
    
    -- T·∫°o map t·ª´ danh s√°ch c≈©
    for _, pet in ipairs(oldPets) do
        local key = pet.name .. "|" .. pet.mut
        oldPetMap[key] = (oldPetMap[key] or 0) + 1
    end
    
    -- T·∫°o map t·ª´ danh s√°ch m·ªõi
    for _, pet in ipairs(newPets) do
        local key = pet.name .. "|" .. pet.mut
        newPetMap[key] = (newPetMap[key] or 0) + 1
    end
    
    local added = {}
    local removed = {}
    
    -- T√¨m pet m·ªõi th√™m
    for key, count in pairs(newPetMap) do
        local oldCount = oldPetMap[key] or 0
        if count > oldCount then
            local name, mut = key:match("([^|]+)|(.+)")
            for i = 1, count - oldCount do
                table.insert(added, {name = name, mut = mut})
            end
        end
    end
    
    -- T√¨m pet b·ªã x√≥a
    for key, count in pairs(oldPetMap) do
        local newCount = newPetMap[key] or 0
        if count > newCount then
            local name, mut = key:match("([^|]+)|(.+)")
            for i = 1, count - newCount do
                table.insert(removed, {name = name, mut = mut})
            end
        end
    end
    
    return added, removed
end

-- H√†m ki·ªÉm tra xem c√≥ c·∫ßn g·ª≠i API kh√¥ng
local function shouldSendToAPI(added, removed, timeSinceLastSend, timeSinceLastForce)
    return (#added > 0 or #removed > 0 or 
            timeSinceLastSend >= TIMING_CONFIG.apiSendInterval or 
            timeSinceLastForce >= TIMING_CONFIG.forceUpdateInterval)
end

-- H√†m hi·ªÉn th·ªã pet list trong console v·ªõi authentication info
local function displayPetsInConsole(pets, isInitial)
    if isInitial then
        print("\n" .. string.rep("=", 80))
        print("üîê KH·ªûI CH·∫†Y AUTHENTICATED PET MONITOR")
        print("‚è∞ Th·ªùi gian: " .. os.date("%Y-%m-%d %H:%M:%S"))
        print("üîë Key User: " .. (userInfo and userInfo.username or "Not authenticated"))
        print("üéØ Slots: " .. (userInfo and userInfo.slots or "Unknown"))
        print("üìä T·ªïng s·ªë pet ƒë∆∞·ª£c ph√©p t√¨m th·∫•y: " .. #pets)
        print("üì° API URL: " .. API_CONFIG.baseUrl)
        print("üë§ Account: " .. LocalPlayer.Name)
        print("üîß HTTP Function: " .. (http and "Available" or "NOT AVAILABLE"))
        print("üîê Authentication: " .. (isAuthenticated and "‚úÖ Valid" or "‚ùå Invalid"))
        print("‚öôÔ∏è Timing Config:")
        print("  ‚Ä¢ Pet Check: " .. TIMING_CONFIG.petCheckInterval .. "s")
        print("  ‚Ä¢ API Send: " .. TIMING_CONFIG.apiSendInterval .. "s") 
        print("  ‚Ä¢ Force Update: " .. TIMING_CONFIG.forceUpdateInterval .. "s")
        print("  ‚Ä¢ Auth Check: " .. TIMING_CONFIG.authCheckInterval .. "s")
        print(string.rep("=", 80))
        
        if #pets > 0 then
            for i, pet in ipairs(pets) do
                print(string.format("  [%d] %s | Mutation: %s", i, pet.name, pet.mut))
            end
        else
            print("  ‚ùå Kh√¥ng t√¨m th·∫•y pet n√†o trong danh s√°ch cho ph√©p")
        end
        print(string.rep("=", 80) .. "\n")
    else
        print("\nüîÑ AUTO RECHECK - " .. os.date("%H:%M:%S"))
        print("üìä T·ªïng pet ƒë∆∞·ª£c ph√©p: " .. #pets)
        print("üîê Auth Status: " .. (isAuthenticated and "‚úÖ" or "‚ùå"))
        
        -- Show stats every few checks
        if stats.totalChecks % 5 == 0 then
            local uptime = math.floor(tick() - stats.startTime)
            local successRate = stats.totalApiCalls > 0 and 
                math.floor((stats.successfulCalls / stats.totalApiCalls) * 100) or 0
            
            print("üìà Stats: " .. stats.totalChecks .. " checks, " .. 
                  stats.totalChanges .. " changes, " .. 
                  stats.successfulCalls .. "/" .. stats.totalApiCalls .. 
                  " API calls (" .. successRate .. "% success)")
        end
        
        if #pets > 0 then
            for i, pet in ipairs(pets) do
                print(string.format("  [%d] %s | %s", i, pet.name, pet.mut))
            end
        end
    end
end

-- H√†m hi·ªÉn th·ªã thay ƒë·ªïi trong console
local function displayChangesInConsole(added, removed)
    if #added > 0 then
        print("\n‚úÖ PET M·ªöI XU·∫§T HI·ªÜN:")
        for _, pet in ipairs(added) do
            print("  + " .. pet.name .. " | " .. pet.mut)
        end
        stats.totalChanges = stats.totalChanges + #added
    end
    
    if #removed > 0 then
        print("\n‚ùå PET B·ªä X√ìA:")
        for _, pet in ipairs(removed) do
            print("  - " .. pet.name .. " | " .. pet.mut)
        end
        stats.totalChanges = stats.totalChanges + #removed
    end
    
    if #added > 0 or #removed > 0 then
        print(string.rep("-", 50))
    end
end

-- H√†m b·∫Øt ƒë·∫ßu monitor v·ªõi authentication
local function startPetMonitor(plot)
    lastPetCheckTime = tick()
    lastApiSendTime = tick()
    lastForceUpdateTime = tick()
    lastAuthCheck = tick()
    
    -- Ki·ªÉm tra HTTP function
    if not http then
        warn("‚ùå C·∫¢NH B√ÅO: HTTP request function kh√¥ng c√≥ s·∫µn!")
        warn("‚ùå C·∫ßn s·ª≠ d·ª•ng exploit c√≥ syn.request ho·∫∑c http_request")
        warn("‚ùå Script s·∫Ω kh√¥ng ho·∫°t ƒë·ªông")
        return
    end
    
    -- Authenticate v·ªõi server
    print("üîê ƒêang authenticate v·ªõi server...")
    local authSuccess, authResult = authenticateWithServer()
    if not authSuccess then
        warn("‚ùå Authentication failed! Script s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")
        warn("üí° Ki·ªÉm tra:")
        warn("  ‚Ä¢ Key ƒë√∫ng ch∆∞a: getgenv().PET_TRACKER_KEY = 'your_key'")
        warn("  ‚Ä¢ Server c√≥ ƒëang ch·∫°y kh√¥ng")
        warn("  ‚Ä¢ Key c√≥ b·ªã h·∫øt h·∫°n kh√¥ng")
        return
    end
    
    -- L·∫•y danh s√°ch pet ban ƒë·∫ßu
    lastFoundPets = getAllowedPetsInPlot(plot)
    displayPetsInConsole(lastFoundPets, true)
    
    -- G·ª≠i data ban ƒë·∫ßu t·ªõi API
    if API_CONFIG.enabled and isAuthenticated then
        local success, result = sendDataToAPI(LocalPlayer.Name, lastFoundPets, false)
        if success then
            lastApiSendTime = tick()
            lastForceUpdateTime = tick()
        end
    end
    
    -- Connection cho auto recheck v·ªõi authentication checks
    recheckConnection = RunService.Heartbeat:Connect(function()
        local currentTime = tick()
        
        -- Check authentication status m·ªói 5 ph√∫t
        if currentTime - lastAuthCheck >= TIMING_CONFIG.authCheckInterval then
            lastAuthCheck = currentTime
            
            if isAuthenticated then
                local authValid, authResult = checkAuthenticationStatus()
                if not authValid then
                    warn("‚ö†Ô∏è Authentication expired, re-authenticating...")
                    authenticateWithServer()
                end
            end
        end
        
        -- Check pets m·ªói 30 gi√¢y
        if currentTime - lastPetCheckTime >= TIMING_CONFIG.petCheckInterval then
            lastPetCheckTime = currentTime
            stats.totalChecks = stats.totalChecks + 1
            
            -- Ki·ªÉm tra xem plot c√≤n t·ªìn t·∫°i kh√¥ng
            if not plot.Parent then
                print("‚ùå Plot kh√¥ng c√≤n t·ªìn t·∫°i. D·ª´ng monitor.")
                recheckConnection:Disconnect()
                return
            end
            
            -- L·∫•y danh s√°ch pet m·ªõi
            local newPets = getAllowedPetsInPlot(plot)
            
            -- So s√°nh v·ªõi danh s√°ch c≈©
            local added, removed = comparePetLists(lastFoundPets, newPets)
            
            -- Hi·ªÉn th·ªã thay ƒë·ªïi n·∫øu c√≥
            if #added > 0 or #removed > 0 then
                displayChangesInConsole(added, removed)
                displayPetsInConsole(newPets, false)
            end
            
            -- T√≠nh th·ªùi gian t·ª´ l·∫ßn g·ª≠i API cu·ªëi
            local timeSinceLastSend = currentTime - lastApiSendTime
            local timeSinceLastForce = currentTime - lastForceUpdateTime
            
            -- Ki·ªÉm tra xem c√≥ c·∫ßn g·ª≠i API kh√¥ng
            if API_CONFIG.enabled and isAuthenticated and shouldSendToAPI(added, removed, timeSinceLastSend, timeSinceLastForce) then
                local isForced = (timeSinceLastForce >= TIMING_CONFIG.forceUpdateInterval)
                local reason = ""
                
                if #added > 0 or #removed > 0 then
                    reason = "c√≥ thay ƒë·ªïi pet"
                elseif timeSinceLastSend >= TIMING_CONFIG.apiSendInterval then
                    reason = "scheduled update (120s)"
                elseif isForced then
                    reason = "force update (10min)"
                end
                
                local success, result = sendDataToAPI(LocalPlayer.Name, newPets, isForced)
                if success then
                    lastApiSendTime = currentTime
                    if isForced then
                        lastForceUpdateTime = currentTime
                    end
                    print("üì° API: Data updated - " .. reason)
                else
                    warn("üì° API: Failed to update - " .. reason)
                end
            end
            
            -- C·∫≠p nh·∫≠t danh s√°ch c≈©
            lastFoundPets = newPets
        end
    end)
    
    print("üöÄ Authenticated Pet Monitor ƒë√£ kh·ªüi ch·∫°y!")
    print("üîë User: " .. userInfo.username .. " (" .. userInfo.slots .. " slots)")
    print("üìù Ch·ªâ hi·ªÉn th·ªã " .. #allowedPets .. " lo·∫°i pet ƒë∆∞·ª£c ph√©p.")
    print("üïê Check pets m·ªói " .. TIMING_CONFIG.petCheckInterval .. "s, g·ª≠i API m·ªói " .. TIMING_CONFIG.apiSendInterval .. "s")
    print("üîê Auth check m·ªói " .. TIMING_CONFIG.authCheckInterval .. "s")
    print("‚ö†Ô∏è ƒê·ªÉ d·ª´ng monitor, ch·∫°y l·∫°i script ho·∫∑c reset.")
end

-- Global commands ƒë·ªÉ control authenticated API
_G.PetTrackerAuth = {
    setKey = function(newKey)
        getgenv().PET_TRACKER_KEY = newKey
        isAuthenticated = false
        sessionToken = nil
        userInfo = nil
        print("üîë Key updated to: " .. string.rep("*", #newKey))
        print("üí° Ch·∫°y l·∫°i script ƒë·ªÉ authenticate v·ªõi key m·ªõi")
    end,
    authenticate = function()
        return authenticateWithServer()
    end,
    checkAuth = function()
        return checkAuthenticationStatus()
    end,
    getUserInfo = function()
        return userInfo
    end,
    getStats = function()
        local uptime = math.floor(tick() - stats.startTime)
        local successRate = stats.totalApiCalls > 0 and 
            math.floor((stats.successfulCalls / stats.totalApiCalls) * 100) or 0
        
        print("\nüìä AUTHENTICATED PET TRACKER STATISTICS:")
        print("üîë Key User: " .. (userInfo and userInfo.username or "Not authenticated"))
        print("üéØ Slots: " .. (userInfo and userInfo.slots or "Unknown"))
        print("üîê Authenticated: " .. (isAuthenticated and "Yes" or "No"))
        print("‚è∞ Uptime: " .. math.floor(uptime / 60) .. " minutes")
        print("üîç Total Checks: " .. stats.totalChecks)
        print("üìà Total Changes: " .. stats.totalChanges)
        print("üì° API Calls: " .. stats.successfulCalls .. "/" .. stats.totalApiCalls .. " (" .. successRate .. "% success)")
        print("üîê Auth Attempts: " .. stats.authAttempts)
        print("‚ùå Consecutive Failures: " .. stats.failedCalls)
        print("üêæ Current Pets: " .. #lastFoundPets)
        
        return {
            authenticated = isAuthenticated,
            userInfo = userInfo,
            stats = stats,
            uptime = uptime,
            successRate = successRate
        }
    end,
    sendNow = function()
        if lastFoundPets and isAuthenticated then
            return sendDataToAPI(LocalPlayer.Name, lastFoundPets, true)
        else
            warn("‚ùå Not authenticated or no pet data")
            return false
        end
    end,
    config = API_CONFIG,
    timing = TIMING_CONFIG
}

-- D·ª´ng connection c≈© n·∫øu c√≥
if recheckConnection then
    recheckConnection:Disconnect()
    print("üîÑ ƒê√£ d·ª´ng monitor c≈©.")
end

-- Validate key tr∆∞·ªõc khi ch·∫°y
if not getgenv().PET_TRACKER_KEY or getgenv().PET_TRACKER_KEY == "" then
    error("‚ùå THI·∫æU KEY! S·ª≠ d·ª•ng: getgenv().PET_TRACKER_KEY = 'your_key_here'")
    return
end

-- Ch·∫°y script
print("\nüöÄ Starting Authenticated Pet Tracker...")
print("üîë Key: " .. string.rep("*", #getgenv().PET_TRACKER_KEY))
print("üì° Commands available: _G.PetTrackerAuth")
print("üîß Testing HTTP function...")

if not http then
    error("‚ùå HTTP request function kh√¥ng c√≥ s·∫µn! Script s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")
    return
end

local myPlot = findMyPlot(true)
if not myPlot then
    error("‚ùå Kh√¥ng t√¨m th·∫•y plot c·ªßa b·∫°n! Ki·ªÉm tra l·∫°i trong game.")
    return
end

startPetMonitor(myPlot)
